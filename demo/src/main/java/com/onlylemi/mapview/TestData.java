package com.onlylemi.mapview;

import android.graphics.PointF;

import java.util.ArrayList;
import java.util.List;

/**
 * TestData
 *
 * @author: onlylemi
 */
public final class TestData {

    private TestData() {}

    public static List<PointF> getNodesList() {
        List<PointF> nodes = new ArrayList<>();
        nodes.add(new PointF(222, 34));
        nodes.add(new PointF(268, 34));
        nodes.add(new PointF(314, 34));
        nodes.add(new PointF(359, 34));
        nodes.add(new PointF(406, 34));
        nodes.add(new PointF(455, 34));
        nodes.add(new PointF(500, 34));
        nodes.add(new PointF(547, 34));
        nodes.add(new PointF(590, 34));
        nodes.add(new PointF(630, 34));
        nodes.add(new PointF(229, 194));
        nodes.add(new PointF(268, 194));
        nodes.add(new PointF(314, 194));
        nodes.add(new PointF(359, 194));
        nodes.add(new PointF(406, 194));
        nodes.add(new PointF(455, 194));
        nodes.add(new PointF(500, 194));
        nodes.add(new PointF(547, 194));
        nodes.add(new PointF(590, 194));
        nodes.add(new PointF(630, 194));
        nodes.add(new PointF(425, 194));
        nodes.add(new PointF(229, 260));
        nodes.add(new PointF(425, 260));
        nodes.add(new PointF(630, 260));
        nodes.add(new PointF(229, 310));
        nodes.add(new PointF(425, 310));
        nodes.add(new PointF(630, 310));
        nodes.add(new PointF(229, 360));
        nodes.add(new PointF(425, 360));
        nodes.add(new PointF(630, 360));
        nodes.add(new PointF(229, 410));
        nodes.add(new PointF(425, 410));
        nodes.add(new PointF(630, 410));
        nodes.add(new PointF(229, 460));
        nodes.add(new PointF(425, 460));
        nodes.add(new PointF(630, 460));
        nodes.add(new PointF(229, 510));
        nodes.add(new PointF(425, 510));
        nodes.add(new PointF(630, 510));
        nodes.add(new PointF(229, 560));
        nodes.add(new PointF(425, 560));
        nodes.add(new PointF(571, 560));
        nodes.add(new PointF(229, 610));
        nodes.add(new PointF(425, 610));
        nodes.add(new PointF(571, 610));
        nodes.add(new PointF(229, 670));
        nodes.add(new PointF(425, 670));
        nodes.add(new PointF(571, 670));
        nodes.add(new PointF(240, 830));
        nodes.add(new PointF(280, 830));
        nodes.add(new PointF(320, 830));
        nodes.add(new PointF(390, 830));
        nodes.add(new PointF(475, 830));
        nodes.add(new PointF(560, 830));
        nodes.add(new PointF(620, 830));
        nodes.add(new PointF(320, 760));
        nodes.add(new PointF(390, 760));
        nodes.add(new PointF(475, 760));
        nodes.add(new PointF(560, 760));
        nodes.add(new PointF(280, 670));
        nodes.add(new PointF(320, 670));
        nodes.add(new PointF(475, 670));
        nodes.add(new PointF(620, 714));
        nodes.add(new PointF(1030, 210));
        nodes.add(new PointF(700, 210));
        nodes.add(new PointF(700, 620));
        nodes.add(new PointF(1030, 620));
        nodes.add(new PointF(1290, 200));
        nodes.add(new PointF(1290, 530));
        nodes.add(new PointF(1290, 840));
        nodes.add(new PointF(1090, 840));
        nodes.add(new PointF(700, 714));
        nodes.add(new PointF(1030, 0));

        return nodes;
    }

    public static List<PointF> getNodesContactList() {
        List<PointF> nodesContact = new ArrayList<PointF>();
        nodesContact.add(new PointF(0, 1));
        nodesContact.add(new PointF(0, 10));
        nodesContact.add(new PointF(1, 2));
        nodesContact.add(new PointF(1, 11));
        nodesContact.add(new PointF(2, 3));
        nodesContact.add(new PointF(2, 12));
        nodesContact.add(new PointF(3, 4));
        nodesContact.add(new PointF(3, 13));
        nodesContact.add(new PointF(4, 5));
        nodesContact.add(new PointF(4, 14));
        nodesContact.add(new PointF(5, 6));
        nodesContact.add(new PointF(5, 15));
        nodesContact.add(new PointF(6, 7));
        nodesContact.add(new PointF(6, 16));
        nodesContact.add(new PointF(7, 8));
        nodesContact.add(new PointF(7, 17));
        nodesContact.add(new PointF(8, 9));
        nodesContact.add(new PointF(8, 18));
        nodesContact.add(new PointF(9, 19));
        nodesContact.add(new PointF(10, 11));
        nodesContact.add(new PointF(10, 21));
        nodesContact.add(new PointF(11, 12));
        nodesContact.add(new PointF(12, 13));
        nodesContact.add(new PointF(13, 14));
        nodesContact.add(new PointF(14, 15));
        nodesContact.add(new PointF(14, 20));
        nodesContact.add(new PointF(15, 16));
        nodesContact.add(new PointF(15, 20));
        nodesContact.add(new PointF(16, 17));
        nodesContact.add(new PointF(17, 18));
        nodesContact.add(new PointF(18, 19));
        nodesContact.add(new PointF(19, 23));
        nodesContact.add(new PointF(19, 64));
        nodesContact.add(new PointF(20, 22));
        nodesContact.add(new PointF(21, 22));
        nodesContact.add(new PointF(21, 24));
        nodesContact.add(new PointF(22, 25));
        nodesContact.add(new PointF(22, 23));
        nodesContact.add(new PointF(23, 26));
        nodesContact.add(new PointF(24, 25));
        nodesContact.add(new PointF(24, 27));
        nodesContact.add(new PointF(25, 26));
        nodesContact.add(new PointF(25, 28));
        nodesContact.add(new PointF(26, 29));
        nodesContact.add(new PointF(27, 28));
        nodesContact.add(new PointF(27, 30));
        nodesContact.add(new PointF(28, 29));
        nodesContact.add(new PointF(28, 31));
        nodesContact.add(new PointF(29, 32));
        nodesContact.add(new PointF(30, 31));
        nodesContact.add(new PointF(30, 33));
        nodesContact.add(new PointF(31, 32));
        nodesContact.add(new PointF(31, 34));
        nodesContact.add(new PointF(32, 35));
        nodesContact.add(new PointF(33, 34));
        nodesContact.add(new PointF(33, 36));
        nodesContact.add(new PointF(34, 35));
        nodesContact.add(new PointF(34, 37));
        nodesContact.add(new PointF(35, 38));
        nodesContact.add(new PointF(36, 37));
        nodesContact.add(new PointF(36, 39));
        nodesContact.add(new PointF(37, 38));
        nodesContact.add(new PointF(37, 40));
        nodesContact.add(new PointF(39, 40));
        nodesContact.add(new PointF(39, 42));
        nodesContact.add(new PointF(40, 41));
        nodesContact.add(new PointF(40, 43));
        nodesContact.add(new PointF(41, 44));
        nodesContact.add(new PointF(41, 65));
        nodesContact.add(new PointF(42, 43));
        nodesContact.add(new PointF(42, 45));
        nodesContact.add(new PointF(43, 44));
        nodesContact.add(new PointF(43, 46));
        nodesContact.add(new PointF(44, 47));
        nodesContact.add(new PointF(44, 65));
        nodesContact.add(new PointF(45, 48));
        nodesContact.add(new PointF(45, 59));
        nodesContact.add(new PointF(46, 60));
        nodesContact.add(new PointF(46, 61));
        nodesContact.add(new PointF(47, 61));
        nodesContact.add(new PointF(47, 62));
        nodesContact.add(new PointF(47, 65));
        nodesContact.add(new PointF(47, 58));
        nodesContact.add(new PointF(48, 49));
        nodesContact.add(new PointF(49, 50));
        nodesContact.add(new PointF(49, 59));
        nodesContact.add(new PointF(50, 55));
        nodesContact.add(new PointF(50, 51));
        nodesContact.add(new PointF(51, 52));
        nodesContact.add(new PointF(51, 56));
        nodesContact.add(new PointF(52, 53));
        nodesContact.add(new PointF(52, 57));
        nodesContact.add(new PointF(53, 54));
        nodesContact.add(new PointF(53, 58));
        nodesContact.add(new PointF(54, 62));
        nodesContact.add(new PointF(55, 56));
        nodesContact.add(new PointF(55, 60));
        nodesContact.add(new PointF(56, 57));
        nodesContact.add(new PointF(57, 61));
        nodesContact.add(new PointF(57, 58));
        nodesContact.add(new PointF(59, 60));
        nodesContact.add(new PointF(62, 71));
        nodesContact.add(new PointF(63, 67));
        nodesContact.add(new PointF(63, 72));
        nodesContact.add(new PointF(63, 64));
        nodesContact.add(new PointF(63, 66));
        nodesContact.add(new PointF(64, 65));
        nodesContact.add(new PointF(65, 66));
        nodesContact.add(new PointF(65, 71));
        nodesContact.add(new PointF(66, 68));
        nodesContact.add(new PointF(66, 70));
        nodesContact.add(new PointF(69, 70));

        return nodesContact;
    }

    public static List<PointF> getMarks() {
        List<PointF> marks = new ArrayList<>();
        marks.add(new PointF(42.18929804372842f, 149.86136485760343f));
        marks.add(new PointF(46.478711162255465f, 149.82203116603978f));
        marks.add(new PointF(50.94936708860759f, 149.88103170338528f));
        marks.add(new PointF(65.4085155350978f, 146.91133799032778f));
        marks.add(new PointF(46.43843498273878f, 143.4696399785062f));
        marks.add(new PointF(50.989643268124276f, 143.58764105319722f));
        marks.add(new PointF(65.52934407364786f, 140.91295002686726f));
        marks.add(new PointF(41.202531645569614f, 138.82826437399248f));
        marks.add(new PointF(43.65937859608745f, 135.30789897904353f));
        marks.add(new PointF(65.42865362485615f, 135.30789897904353f));
        marks.add(new PointF(45.210011507479855f, 131.13852767329394f));
        marks.add(new PointF(66.51611047180667f, 130.56818914562064f));
        marks.add(new PointF(66.59666283084005f, 126.43815153143471f));
        marks.add(new PointF(46.76064441887226f, 123.90112842557765f));
        marks.add(new PointF(46.70023014959723f, 120.61676518001074f));
        marks.add(new PointF(46.901611047180666f, 117.27340139709834f));
        marks.add(new PointF(66.67721518987341f, 122.76045137023105f));
        marks.add(new PointF(66.67721518987341f, 118.94508328855454f));
        marks.add(new PointF(51.65420023014959f, 117.33240193444385f));
        marks.add(new PointF(58.44073647871116f, 115.05104782375068f));
        marks.add(new PointF(66.67721518987341f, 115.05104782375068f));
        marks.add(new PointF(70.46317606444188f, 173.44191295002688f));
        marks.add(new PointF(66.59666283084005f, 107.02697474476088f));
        marks.add(new PointF(50.66743383199079f, 106.59430413756046f));
        marks.add(new PointF(46.33774453394706f, 110.64567436861903f));
        marks.add(new PointF(38.74568469505178f, 110.74400859752821f));
        marks.add(new PointF(45.73360184119677f, 106.98764105319721f));
        marks.add(new PointF(44.686421173762945f, 103.58527673293928f));
        marks.add(new PointF(44.686421173762945f, 99.92724341751746f));
        marks.add(new PointF(43.27675489067894f, 96.32821063944117f));
        marks.add(new PointF(43.19620253164557f, 92.63084363245567f));
        marks.add(new PointF(43.11565017261219f, 88.89414293390651f));
        marks.add(new PointF(43.09551208285385f, 85.09844169801183f));
        marks.add(new PointF(43.55868814729574f, 81.04707146695326f));
        marks.add(new PointF(43.17606444188722f, 77.74304137560452f));
        marks.add(new PointF(42.55178365937859f, 74.0850080601827f));
        marks.add(new PointF(42.57192174913693f, 70.46630843632455f));
        marks.add(new PointF(42.491369390103564f, 66.82794196668458f));
        marks.add(new PointF(42.57192174913693f, 63.150241805480924f));
        marks.add(new PointF(46.76064441887226f, 68.89296077377755f));
        marks.add(new PointF(42.491369390103564f, 59.47254164427727f));
        marks.add(new PointF(42.430955120828536f, 55.834175174637295f));
        marks.add(new PointF(46.76064441887226f, 60.18054809242343f));
        marks.add(new PointF(42.471231300345224f, 52.23514239656099f));
        marks.add(new PointF(46.76064441887226f, 52.37281031703385f));
        marks.add(new PointF(55.440161104718065f, 52.17614185921548f));
        marks.add(new PointF(42.53164556962025f, 48.93111230521225f));
        marks.add(new PointF(46.72036823935558f, 48.26243954862977f));
        marks.add(new PointF(55.33947065592635f, 47.35776464266523f));
        marks.add(new PointF(64.4620253164557f, 47.456098871574426f));
        marks.add(new PointF(37.85960874568469f, 45.64674905964535f));
        marks.add(new PointF(42.53164556962025f, 45.64674905964535f));
        marks.add(new PointF(42.471231300345224f, 42.323052122514774f));
        marks.add(new PointF(64.32105868814729f, 41.9690488984417f));
        marks.add(new PointF(42.491369390103564f, 38.9993551853842f));
        marks.add(new PointF(38.94706559263521f, 35.69532509403547f));
        marks.add(new PointF(42.471231300345224f, 35.675658248253626f));
        marks.add(new PointF(64.421749136939f, 35.91166039763568f));
        marks.add(new PointF(42.471231300345224f, 32.46996238581408f));
        marks.add(new PointF(64.421749136939f, 30.46394411606663f));
        marks.add(new PointF(42.511507479861905f, 28.870929607737775f));
        marks.add(new PointF(64.40161104718067f, 24.85889306824288f));
        marks.add(new PointF(42.410817031070195f, 25.586566362170878f));
        marks.add(new PointF(42.430955120828536f, 20.768189145620635f));
        marks.add(new PointF(39.1283084004603f, 25.527565824825363f));
        marks.add(new PointF(35.745109321058685f, 25.488232133261686f));
        marks.add(new PointF(64.44188722669735f, 19.293175711982805f));
        marks.add(new PointF(25.91772151898734f, 148.89768941429338f));
        marks.add(new PointF(32.22094361334867f, 141.32595378828586f));
        marks.add(new PointF(32.22094361334867f, 134.97356260075227f));
        marks.add(new PointF(32.241081703107014f, 128.26716818914562f));
        marks.add(new PointF(32.22094361334867f, 121.10843632455669f));
        marks.add(new PointF(30.38837744533947f, 110.62600752283718f));
        marks.add(new PointF(30.28768699654775f, 107.02697474476088f));
        marks.add(new PointF(30.307825086306096f, 103.3886082751209f));
        marks.add(new PointF(30.247410817031067f, 99.88790972595379f));
        marks.add(new PointF(30.34810126582278f, 96.5052122514777f));
        marks.add(new PointF(30.34810126582278f, 93.24051585169263f));
        marks.add(new PointF(30.38837744533947f, 86.1801182160129f));
        marks.add(new PointF(29.623130034522436f, 82.75808704997313f));
        marks.add(new PointF(30.368239355581125f, 79.2967221923697f));
        marks.add(new PointF(25.293440736478708f, 75.83535733476626f));
        marks.add(new PointF(30.307825086306096f, 75.67802256851155f));
        marks.add(new PointF(30.368239355581125f, 72.25599140247179f));
        marks.add(new PointF(30.38837744533947f, 69.10929607737775f));
        marks.add(new PointF(25.394131185270425f, 65.64793121977432f));
        marks.add(new PointF(30.40851553509781f, 65.68726491133799f));
        marks.add(new PointF(30.307825086306096f, 62.34390112842558f));
        marks.add(new PointF(25.192750287686994f, 58.80386888769479f));
        marks.add(new PointF(30.368239355581125f, 58.8628694250403f));
        marks.add(new PointF(30.34810126582278f, 55.36217087587319f));
        marks.add(new PointF(30.307825086306096f, 52.05814078452445f));
        marks.add(new PointF(27.146144994246256f, 48.81311123052122f));
        marks.add(new PointF(30.40851553509781f, 48.79344438473939f));
        marks.add(new PointF(30.26754890678941f, 45.568081676518f));
        marks.add(new PointF(25.897583429228998f, 42.224717893605586f));
        marks.add(new PointF(30.428653624856153f, 42.30338527673294f));
        marks.add(new PointF(30.690448791714612f, 38.901020956475016f));
        marks.add(new PointF(30.630034522439583f, 35.57732401934444f));
        marks.add(new PointF(30.5897583429229f, 32.2732939279957f));
        marks.add(new PointF(30.146720368239354f, 29.106931757119828f));
        marks.add(new PointF(27.569044879171457f, 24.85889306824288f));
        marks.add(new PointF(32.2813578826237f, 25.46856528747985f));
        marks.add(new PointF(28.878020713463748f, 20.768189145620635f));
        marks.add(new PointF(32.241081703107014f, 20.63052122514777f));
        marks.add(new PointF(30.46892980437284f, 14.396131112305213f));
        marks.add(new PointF(19.976985040276176f, 14.435464803868888f));
        marks.add(new PointF(19.976985040276176f, 19.568511552928534f));
        marks.add(new PointF(19.976985040276176f, 26.31423965609887f));
        marks.add(new PointF(16.795166858457996f, 32.31262761955938f));
        marks.add(new PointF(16.795166858457996f, 36.32466415905427f));
        marks.add(new PointF(16.795166858457996f, 40.336700698549166f));
        marks.add(new PointF(16.795166858457996f, 44.329070392262224f));
        marks.add(new PointF(16.795166858457996f, 48.557442235357335f));
        marks.add(new PointF(16.795166858457996f, 52.74648038688877f));
        marks.add(new PointF(11.438434982738778f, 56.73885008060183f));
        marks.add(new PointF(16.795166858457996f, 56.73885008060183f));
        marks.add(new PointF(16.795166858457996f, 60.73121977431489f));
        marks.add(new PointF(16.734752589182968f, 64.68425577646427f));
        marks.add(new PointF(16.795166858457996f, 68.69629231595916f));
        marks.add(new PointF(16.795166858457996f, 72.68866200967221f));
        marks.add(new PointF(16.775028768699652f, 76.75969908651263f));
        marks.add(new PointF(16.775028768699652f, 80.77173562600753f));
        marks.add(new PointF(16.75489067894131f, 84.74443847393874f));
        marks.add(new PointF(16.75489067894131f, 88.71714132186996f));
        marks.add(new PointF(16.75489067894131f, 92.7488447071467f));
        marks.add(new PointF(16.75489067894131f, 96.78054809242343f));
        marks.add(new PointF(13.472382048331415f, 100.75325094035465f));
        marks.add(new PointF(16.75489067894131f, 100.75325094035465f));
        marks.add(new PointF(13.472382048331415f, 104.76528747984955f));
        marks.add(new PointF(16.75489067894131f, 104.76528747984955f));
        marks.add(new PointF(16.775028768699652f, 108.79699086512628f));
        marks.add(new PointF(16.775028768699652f, 113.18269747447609f));
        marks.add(new PointF(13.472382048331415f, 117.09639978506179f));
        marks.add(new PointF(16.775028768699652f, 117.09639978506179f));
        marks.add(new PointF(16.775028768699652f, 120.99043524986567f));
        marks.add(new PointF(8.61910241657077f, 125.00247178936056f));
        marks.add(new PointF(11.216915995397008f, 124.86480386888769f));
        marks.add(new PointF(15.768124280782507f, 125.0221386351424f));
        marks.add(new PointF(16.775028768699652f, 128.69983879634606f));
        marks.add(new PointF(16.775028768699652f, 132.67254164427726f));
        marks.add(new PointF(15.909090909090908f, 136.6452444922085f));
        marks.add(new PointF(5.719217491369389f, 138.76926383664696f));
        marks.add(new PointF(9.001726121979285f, 138.76926383664696f));
        marks.add(new PointF(12.384925201380897f, 138.76926383664696f));
        marks.add(new PointF(15.768124280782507f, 138.76926383664696f));






        return marks;
    }

    public static List<String> getMarksName() {
        List<String> marksName = new ArrayList<>();
        for (int i = 0; i < getMarks().size(); i++) {
            marksName.add("Shop " + (i + 1));
        }
        return marksName;
    }
}
